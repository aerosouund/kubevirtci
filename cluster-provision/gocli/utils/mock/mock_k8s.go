// Code generated by MockGen. DO NOT EDIT.
// Source: utils/k8s/k8s.go
//
// Generated by this command:
//
//	mockgen -source=utils/k8s/k8s.go -destination=utils/mock/mock_k8s.go -package=kubevirtcimocks
//

// Package kubevirtcimocks is a generated GoMock package.
package kubevirtcimocks

import (
	embed "embed"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// MockK8sDynamicClient is a mock of K8sDynamicClient interface.
type MockK8sDynamicClient struct {
	ctrl     *gomock.Controller
	recorder *MockK8sDynamicClientMockRecorder
}

// MockK8sDynamicClientMockRecorder is the mock recorder for MockK8sDynamicClient.
type MockK8sDynamicClientMockRecorder struct {
	mock *MockK8sDynamicClient
}

// NewMockK8sDynamicClient creates a new mock instance.
func NewMockK8sDynamicClient(ctrl *gomock.Controller) *MockK8sDynamicClient {
	mock := &MockK8sDynamicClient{ctrl: ctrl}
	mock.recorder = &MockK8sDynamicClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8sDynamicClient) EXPECT() *MockK8sDynamicClientMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockK8sDynamicClient) Apply(fs embed.FS, manifestPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", fs, manifestPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockK8sDynamicClientMockRecorder) Apply(fs, manifestPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockK8sDynamicClient)(nil).Apply), fs, manifestPath)
}

// Delete mocks base method.
func (m *MockK8sDynamicClient) Delete(gvk schema.GroupVersionKind, name, ns string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", gvk, name, ns)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockK8sDynamicClientMockRecorder) Delete(gvk, name, ns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockK8sDynamicClient)(nil).Delete), gvk, name, ns)
}

// Get mocks base method.
func (m *MockK8sDynamicClient) Get(gvk schema.GroupVersionKind, name, ns string) (*unstructured.Unstructured, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", gvk, name, ns)
	ret0, _ := ret[0].(*unstructured.Unstructured)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockK8sDynamicClientMockRecorder) Get(gvk, name, ns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockK8sDynamicClient)(nil).Get), gvk, name, ns)
}

// List mocks base method.
func (m *MockK8sDynamicClient) List(gvk schema.GroupVersionKind, ns string) (*unstructured.UnstructuredList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", gvk, ns)
	ret0, _ := ret[0].(*unstructured.UnstructuredList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockK8sDynamicClientMockRecorder) List(gvk, ns any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockK8sDynamicClient)(nil).List), gvk, ns)
}
