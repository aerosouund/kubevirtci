// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/libssh/ssh.go
//
// Generated by this command:
//
//	mockgen -source=pkg/libssh/ssh.go -destination=utils/mock/mock_ssh.go -package=kubevirtcimocks
//

// Package kubevirtcimocks is a generated GoMock package.
package kubevirtcimocks

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockSSHClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockSSHClient
}

// NewMockClient creates a new mock instance.
func NewMockSSHClient(ctrl *gomock.Controller) *MockSSHClient {
	mock := &MockSSHClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Command mocks base method.
func (m *MockSSHClient) Command(cmd string, stdOut bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Command", cmd, stdOut)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Command indicates an expected call of Command.
func (mr *MockClientMockRecorder) Command(cmd, stdOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Command", reflect.TypeOf((*MockSSHClient)(nil).Command), cmd, stdOut)
}

// CopyRemoteFile mocks base method.
func (m *MockSSHClient) CopyRemoteFile(remotePath, localPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyRemoteFile", remotePath, localPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyRemoteFile indicates an expected call of CopyRemoteFile.
func (mr *MockClientMockRecorder) CopyRemoteFile(remotePath, localPath any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyRemoteFile", reflect.TypeOf((*MockSSHClient)(nil).CopyRemoteFile), remotePath, localPath)
}

// SCP mocks base method.
func (m *MockSSHClient) SCP(destPath string, contents fs.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SCP", destPath, contents)
	ret0, _ := ret[0].(error)
	return ret0
}

// SCP indicates an expected call of SCP.
func (mr *MockClientMockRecorder) SCP(destPath, contents any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SCP", reflect.TypeOf((*MockSSHClient)(nil).SCP), destPath, contents)
}
