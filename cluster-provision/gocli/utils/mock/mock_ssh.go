// Code generated by MockGen. DO NOT EDIT.
// Source: utils/ssh/ssh.go
//
// Generated by this command:
//
//	mockgen -source=utils/ssh/ssh.go -destination=utils/mock/mock_ssh.go -package=kubevirtcimocks
//

// Package kubevirtcimocks is a generated GoMock package.
package kubevirtcimocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSSHClient is a mock of SSHClient interface.
type MockSSHClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSHClientMockRecorder
}

// MockSSHClientMockRecorder is the mock recorder for MockSSHClient.
type MockSSHClientMockRecorder struct {
	mock *MockSSHClient
}

// NewMockSSHClient creates a new mock instance.
func NewMockSSHClient(ctrl *gomock.Controller) *MockSSHClient {
	mock := &MockSSHClient{ctrl: ctrl}
	mock.recorder = &MockSSHClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHClient) EXPECT() *MockSSHClientMockRecorder {
	return m.recorder
}

// SSH mocks base method.
func (m *MockSSHClient) SSH(cmd string) (error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSH", cmd)

	ret1, _ := ret[0].(error)
	return ret1
}

// SSH indicates an expected call of SSH.
func (mr *MockSSHClientMockRecorder) SSH(cmd string) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSH", reflect.TypeOf((*MockSSHClient)(nil).SSH), cmd)
}
