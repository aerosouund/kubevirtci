// Code generated by MockGen. DO NOT EDIT.
// Source: utils/ssh/ssh.go
//
// Generated by this command:
//
//	mockgen -source=utils/ssh/ssh.go -destination=utils/mock/mock_ssh.go -package=kubevirtcimocks
//

// Package kubevirtcimocks is a generated GoMock package.
package kubevirtcimocks

import (
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSSHClient is a mock of SSHClient interface.
type MockSSHClient struct {
	ctrl     *gomock.Controller
	recorder *MockSSHClientMockRecorder
}

// MockSSHClientMockRecorder is the mock recorder for MockSSHClient.
type MockSSHClientMockRecorder struct {
	mock *MockSSHClient
}

// NewMockSSHClient creates a new mock instance.
func NewMockSSHClient(ctrl *gomock.Controller) *MockSSHClient {
	mock := &MockSSHClient{ctrl: ctrl}
	mock.recorder = &MockSSHClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHClient) EXPECT() *MockSSHClientMockRecorder {
	return m.recorder
}

// CopyRemoteFile mocks base method.
func (m *MockSSHClient) CopyRemoteFile(arg0 uint16, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyRemoteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyRemoteFile indicates an expected call of CopyRemoteFile.
func (mr *MockSSHClientMockRecorder) CopyRemoteFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyRemoteFile", reflect.TypeOf((*MockSSHClient)(nil).CopyRemoteFile), arg0, arg1, arg2)
}

// JumpSCP mocks base method.
func (m *MockSSHClient) JumpSCP(arg0 uint16, arg1 int, arg2 string, arg3 fs.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JumpSCP", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// JumpSCP indicates an expected call of JumpSCP.
func (mr *MockSSHClientMockRecorder) JumpSCP(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpSCP", reflect.TypeOf((*MockSSHClient)(nil).JumpSCP), arg0, arg1, arg2, arg3)
}

// JumpSSH mocks base method.
func (m *MockSSHClient) JumpSSH(sshPort uint16, nodeIdx int, cmd string, root, stdOut bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JumpSSH", sshPort, nodeIdx, cmd, root, stdOut)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JumpSSH indicates an expected call of JumpSSH.
func (mr *MockSSHClientMockRecorder) JumpSSH(sshPort, nodeIdx, cmd, root, stdOut any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpSSH", reflect.TypeOf((*MockSSHClient)(nil).JumpSSH), sshPort, nodeIdx, cmd, root, stdOut)
}
